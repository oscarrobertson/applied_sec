#!/usr/bin/env python

import sys , subprocess, os.path, math, time
from copy import copy

SUBBYTES_ARRAY = [    
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]

INVERSE_SUBBYTES_ARRAY = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]

RCON = [
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
        0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
        0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
        0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
        0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
        0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
        0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
        0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
        0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
        ]

## x and k bit indexes for all step 1 equations
## this is the orginal setup from the paper
# STEP_1_INDEXING = [
#     [10,13,0,7],
#     [11,14,1,4],
#     [8,15,2,5],
#     [9,12,3,6]
#     ]
STEP_1_INDEXING = [
    [10,13,0,7],
    [1,4,11,14],
    [8,15,2,5],
    [3,6,9,12]
    ]

def interact( l, c ) :
    # Send l to attack target.
    target_in.write( "%s\n" % ( l ) ) ; target_in.flush()
    # Send c to attack target.
    target_in.write( "%s\n" % ( c ) ) ; target_in.flush()
    # Receive r from attack target.
    r = target_out.readline().strip ()
    return zeroPad(r,32)

def ceil_divide(x, y):
    return (x + (-x % y)) // y

def xor_list_str(x,y):
    a = copy(x)
    b = copy(y)
    if type(a[0]) == str:
        a = [int(k,16) for k in a]
    if type(b[0]) == str:
        b = [int(k,16) for k in b]
    return [zeroPad(format(a[i]^b[i],"X"),2) for i in range(len(a))]

def xor_list(a,b):
    return [a[i]^b[i] for i in range(len(a))]

def printMat(mat):
    for i in range(4):
        print ""+str(mat[0][i])+"   "+str(mat[1][i])+"   "+str(mat[2][i])+"   "+str(mat[3][i])

def zeroPad(hexString, expectedLength):
    zeros = expectedLength- len(hexString)
    for i in range(zeros):
        hexString = '0' + hexString
    return hexString

## ELEMENTS ACCESSED AS COLUMN,ROW
##     0    1    2    3
## 0 | x1   x5   x9   x13 |
## 1 | x2   x6   x10  x14 |
## 2 | x3   x7   x11  x15 |
## 3 | x4   x8   x12  x16 |
def makeMat(hexString):
    output = []
    if type(hexString) == str:
        byteString = [hexString[x:x+2] for x in range(0,len(hexString),2)]
    else:
        byteString = hexString
    for i in range(4):
        output.append(byteString[i*4:i*4+4])
    return output


def makeHexString(mat):
    output = ""
    for x in range(4):
        for y in range(4):
            if type(mat[x][y]) == str:
                output = output + mat[x][y]
            else:
                output = output + zeroPad(format(mat[x][y], "X"), 2)
    return output

def doSub(inVal):
    if type(inVal)==str:
        inVal = int(inVal,16)
        return zeroPad(format(SUBBYTES_ARRAY[inVal],"X"),2)
    return SUBBYTES_ARRAY[inVal]

def inverseDoSub(inVal):
    if type(inVal)==str:
        inVal = int(inVal,16)
        return zeroPad(format(INVERSE_SUBBYTES_ARRAY[inVal],"X"),2)
    return INVERSE_SUBBYTES_ARRAY[inVal]

def SubBytes(mat):
    output = []
    for j in range(4):
        output.append( [doSub(mat[j][i]) for i in range(4)] )
    return output

def InverseSubBytes(mat):
    output = []
    for j in range(4):
        output.append( [inverseDoSub(mat[j][i]) for i in range(4)] )
    return output

def ShiftRows(mat):
    return [[mat[0][0],mat[1][1],mat[2][2],mat[3][3]],
    [mat[1][0],mat[2][1],mat[3][2],mat[0][3]],
    [mat[2][0],mat[3][1],mat[0][2],mat[1][3]],
    [mat[3][0],mat[0][1],mat[1][2],mat[2][3]]]

def galoisMult(a, b):
    asString = False
    if type(a) == str:
        a = int(a,16)
        b = int(b,16)
        asString = True
    p = 0
    hiBitSet = 0
    for i in range(8):
        if b & 1 == 1:
            p ^= a
        hiBitSet = a & 0x80
        a <<= 1
        if hiBitSet == 0x80:
            a ^= 0x1b
        b >>= 1
    if asString:
        return zeroPad(format(p % 256, "X"),2)
    return p % 256

def mixCol(col):
    output = []
    asString = False
    if type(col[0])==str:
        asString = True
        col = [int(e,16) for e in col]
    output.append(galoisMult(2,col[0]) ^ galoisMult(3,col[1]) ^ col[2] ^ col[3])
    output.append(col[0] ^ galoisMult(2,col[1]) ^ galoisMult(3,col[2]) ^ col[3])
    output.append(col[0] ^ col[1] ^ galoisMult(2,col[2]) ^ galoisMult(3,col[3]))
    output.append(galoisMult(3,col[0]) ^ col[1] ^ col[2] ^ galoisMult(2,col[3]))
    if asString:
        return [zeroPad(format(i,"X"),2) for i in output]
    return output

def MixColumns(mat):
    output = []
    for col in mat:
        output.append(mixCol(col))
    return output

def addRoundKey(mat, keyMatIn):
    keyMat = copy(keyMatIn)
    output = []
    asString = False
    if type(mat[0][0]) == str:
        asString = True
        for i in range(4):
            keyMat[i] = [int(k,16) for k in keyMat[i]]
            mat[i] = [int(k,16) for k in mat[i]]
    for i in range(4):
        output.append([mat[i][k] ^ keyMat[i][k] for k in range(4)])
    if asString:
        for i in range(4):
            output[i] = [zeroPad(format(k,"X"),2) for k in output[i]]
    return output

def subWord(word):
    return [doSub(i) for i in word]

def rotWord(word):
    return [word[(k+1)%len(word)] for k in range(len(word))]

def KeyExpansion(keyIn):
    key = [int(keyIn[x:x+2],16) for x in range(0,len(keyIn),2)]
    w = [0]*44
    for i in range(4):
        w[i] = [key[4*i],key[4*i+1],key[4*i+2],key[4*i+3]]

    i = 4
    while i < 44:
        temp = w[i-1]
        if i%4 == 0:
            temp = xor_list(subWord(rotWord(temp)),[RCON[i/4],0,0,0])
        w[i] = xor_list(w[i-4], temp)
        i += 1
    return w


def AESEncrypt(P,K):
    P = makeMat(P)
    K = KeyExpansion(K)
    for i in range(4):
        ##K[i] = [int(k,16) for k in K[i]]
        P[i] = [int(k,16) for k in P[i]]

    X = addRoundKey(P,K[0:4])
    for i in range(1,11):
        X = SubBytes(X)
        X = ShiftRows(X)
        if not i == 10:
            pass
            X = MixColumns(X)
        X = addRoundKey(X,K[i*4:(i+1)*4])
    C = makeHexString(X)
    return C
 
def findDeltaCore(index, ct, ct_f, delta):
    output = []
    for i in range(256):
        if inverseDoSub(ct[index] ^ i) ^ inverseDoSub(ct_f[index] ^ i) == delta:
            output.append(i)
    return output

def findDelta(deltaVal, ct, ct_f):
    ## get x and k bit indexes
    XK = STEP_1_INDEXING[deltaVal-1]
    possible = []
    for delta in range(1,256):
        a_poss = findDeltaCore(XK[0],ct,ct_f,delta)
        if len(a_poss) == 0:
            continue

        b_poss = findDeltaCore(XK[1],ct,ct_f,delta)
        if len(b_poss) == 0:
            continue

        c_poss = findDeltaCore(XK[2],ct,ct_f,galoisMult(delta,2))
        if len(c_poss) == 0:
            continue

        d_poss = findDeltaCore(XK[3],ct,ct_f,galoisMult(delta,3))
        if len(d_poss) == 0:
            continue

        for a in a_poss:
            for b in b_poss:
                for c in c_poss:
                    for d in d_poss:
                        possible.append((a,b,c,d))
        
    return possible

def findf(poss_1,poss_2,poss_3,poss_4):
    pass

def getK9FromK10(k10):
    k10_ = makeMat(k10)
    printMat(k10_)
    print ""
    k10 = [int(k10[x:x+2],16) for x in range(0,len(k10),2)]
    k9 = [0]*16
    k9[0] = k10[0]^doSub(k10[13]^k10[9])^RCON[10]
    k9[1] = k10[1]^doSub(k10[14]^k10[10])
    k9[2] = k10[2]^doSub(k10[15]^k10[11])
    k9[3] = k10[3]^doSub(k10[12]^k10[8])

    k9[4] = k10[4]^k10[0]
    k9[5] = k10[5]^k10[1]
    k9[6] = k10[6]^k10[2]
    k9[7] = k10[7]^k10[3]

    k9[8] = k10[8]^k10[4]
    k9[9] = k10[9]^k10[5]
    k9[10] = k10[10]^k10[6]
    k9[11] = k10[11]^k10[7]

    k9[12] = k10[12]^k10[8]
    k9[13] = k10[13]^k10[9]
    k9[14] = k10[14]^k10[10]
    k9[15] = k10[15]^k10[11]

    k9_ = [zeroPad(format(i,"X"),2) for i in k9]

    k9_ = makeMat(k9_)
    printMat(k9_)


if ( __name__ == "__main__" ) :
    # Produce a sub -process representing the attack target.
    target = subprocess.Popen( args = os.path.abspath(sys.argv[1]), stdout = subprocess.PIPE , stdin = subprocess.PIPE )
    # Construct handles to attack target standard input and output.
    target_out = target.stdout
    target_in = target.stdin
    #a = "6F35D9D33A062DD5E59416C50C6B4FFF"
    data="3243f6a8885a308d313198a2e0370734"
    F1 = "8,1,0,0,0"
    F2 = "8,1,0,1,0"
    F3 = "8,1,0,2,0"
    F4 = "8,1,0,3,0"
    ct = interact(data,"")
    ct_fault1 = interact(data,F1)
    ct_fault2 = interact(data,F2)
    ct_fault3 = interact(data,F3)
    ct_fault4 = interact(data,F4)
    print ct_fault1
    print ct_fault2
    print ct_fault3
    print ct_fault4

    ct_bytes = [int(ct[x:x+2],16) for x in range(0,len(ct),2)]
    ct_fault_bytes1 = [int(ct_fault1[x:x+2],16) for x in range(0,len(ct_fault1),2)]
    ct_fault_bytes2 = [int(ct_fault2[x:x+2],16) for x in range(0,len(ct_fault2),2)]
    ct_fault_bytes3 = [int(ct_fault3[x:x+2],16) for x in range(0,len(ct_fault3),2)]
    ct_fault_bytes4 = [int(ct_fault4[x:x+2],16) for x in range(0,len(ct_fault4),2)]

    poss_1 = findDelta(1, ct_bytes, ct_fault_bytes1)
    print len(poss_1)
    poss_1_t = findDelta(1, ct_bytes, ct_fault_bytes2)
    print len(poss_1)
    poss_1 = [i for i in poss_1 if i in poss_1_t]
    print len(poss_1)
    poss_2 = findDelta(2, ct_bytes, ct_fault_bytes)
    poss_3 = findDelta(3, ct_bytes, ct_fault_bytes)
    poss_4 = findDelta(4, ct_bytes, ct_fault_bytes)


    #k10 = "d014f9a8c9ee2589e13f0cc8b6630ca6"

    



    #key="000102030405060708090a0b0c0d0e0f"
    #data="00112233445566778899aabbccddeeff"
    #target="69c4e0d86a7b0430d8cdb78070b4c55a"
    key="2b7e151628aed2a6abf7158809cf4f3c"
    data="3243f6a8885a308d313198a2e0370734"

    start = time.time()
    for i in range(256**2):
        AESEncrypt(data,key)
    end = time.time()
    print end-start


