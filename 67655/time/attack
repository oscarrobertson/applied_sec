#!/usr/bin/env python

import sys , subprocess, os.path, math, hashlib,random

MAXLONG = 18446744073709551616
TOTAL_TIMINGS = 0

def make64bit(n):
    return n%MAXLONG

def numberToBase(n, b):
    if n == 0:
        return [0]
    digits = []
    while n:
        digits.append(int(n % b))
        n /= b
    return digits

def getlimbn(op, n):
    limbs = numberToBase(op, MAXLONG)
    if len(limbs) <= n:
        return 0
    else:
        return limbs[n]

def mpz_size(op):
    return len(numberToBase(op, MAXLONG))

def interact( c ) :
    global TOTAL_TIMINGS
    TOTAL_TIMINGS+=1
    # Send c to attack target.
    target_in.write( "%s\n" % ( c ) ) ; target_in.flush()
    # Receive r from attack target.
    time =  int(target_out.readline().strip ()) 
    m = target_out.readline().strip () 
    return (time, m)

def ceil_divide(x, y):
    return (x + (-x % y)) // y

def readConf(confName):
    pathStr = os.path.abspath(confName)
    with open(pathStr, "r") as f:
        n = f.readline().strip()
        e = f.readline().strip()
    return (n, e)

def zeroPad(hexString, expectedLength):
    zeros = expectedLength- len(hexString)
    for i in range(zeros):
        hexString = '0' + hexString
    return hexString

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

def montW(N):
    t = 1
    N0 = getlimbn(N, 0)
    for i in range(1,64):
        t = make64bit(t*t*N0)
    t = make64bit(-t)
    return t

def montP2(N):
    t = 1
    for i in range(1, 2*64*mpz_size(N)+1):
        t = (t + t)%N
    return t

def find_p(N):
    return 1 << (len(format(N,'b')))

def montMul(x, y, N, w, p):
    r0 = x*y
    r1 = r0 + (r0 * w%p)*N
    r = r1 >> len(format(p,'b'))-1
    if r >= N:
        r = r-N
    return r

def montMulUsesReduction(x, y, N, w, p):
    r0 = x*y
    r1 = r0 + (r0 * w%p)*N
    r = r1 >> len(format(p,'b'))-1
    if r >= N:
        #r = r-N
        return True
    return False

def montExp(a, e, N, w, p):
    a_ = (a*p)%N
    x_ = p%N
    for i in format(e, 'b'):
        x_ = montMul(x_,x_,N,w,p)
        if i == '1':
            x_ = montMul(x_,a_,N,w,p)
    return montMul(x_,1,N,w,p)

#returns (mtemp, a_residual)
def montExpPartial(a,knownBits,N,w,p,old_mtemp):
    a_ = (a*p)%N
    if old_mtemp ==None:
        x_ = p%N
    else:
        x_ = old_mtemp
        knownBits = knownBits[-1]
    for i in knownBits:
        if old_mtemp == None:
            x_ = montMul(x_,x_,N,w,p)
        if i == '1':
            x_ = montMul(x_,a_,N,w,p)
    x_ = montMul(x_,x_,N,w,p)
    return (x_,a_)
    #return montMul(x_,1,N,w,p)

#returns message set {1,2}
def assumek1(mtemp,a_residual,N,w,p):
    mtemp = montMul(mtemp,a_residual,N,w,p)
    if montMulUsesReduction(mtemp,mtemp,N,w,p):
        return 1
    else:
        return 2

#returns message set {3,4}
def assumek0(mtemp,N,w,p):
    if montMulUsesReduction(mtemp,mtemp,N,w,p):
        return 3
    else:
        return 4

# returns 3 tuple of message classes and timing
# ({1,2}, {3,4}, timing, mtemp)
def classAndTime(c,knownBits,N,w,p,old_mtemp):
    (mtemp, a_residual) = montExpPartial(c,knownBits,N,w,p,old_mtemp)
    (timing,m) = interact(format(c,"X"))
    return (assumek1(mtemp,a_residual,N,w,p),assumek0(mtemp,N,w,p),timing, mtemp)

def runSampleRound(N,w,p,knownBits,samples,samplesMtemp):
    counts = [0,0,0,0]
    totals = [0,0,0,0]
    for i in range(len(samples)):
        (c1,c2,timing,mtemp) = classAndTime(samples[i],knownBits,N,w,p,samplesMtemp[i])
        samplesMtemp[i] = mtemp
        counts[c1-1] += 1
        counts[c2-1] += 1
        totals[c1-1] += timing
        totals[c2-1] += timing
    for i in range(4):
        totals[i] /= counts[i]
    return (totals[0]-totals[1],totals[2]-totals[3], samplesMtemp)



if ( __name__ == "__main__" ) :
    # Produce a sub -process representing the attack target.
    target = subprocess.Popen( args = os.path.abspath(sys.argv[1]), stdout = subprocess.PIPE , stdin = subprocess.PIPE )
    # Construct handles to attack target standard input and output.
    target_out = target.stdout
    target_in = target.stdin

    (n, e) = readConf(sys.argv[2])

    n = int(n, 16)
    e = int(e, 16)

    m = 730
    c = pow(m,e,n)

    key='27725720698C898B'

    p2 = 1
    w = 1
    p = find_p(n)
    gcd = egcd(p,n)

    p_1 = -gcd[1]
    w = -gcd[2]

    def findkey(numSamples):

        ##numSamples = 2000
        possibleError = False

        threshold = 20
        knownBits = '1'
        samples = [int(random.random()*n) for x in range(numSamples)]
        samplesMtemp = [None]*numSamples
        roundResults = [None]*64
        keyFound = False
        numResamples = 0

        ## remove the < 63 for larger key sizes
        #print "Rounds: ",
        while len(knownBits) < 63:
            #print str(len(knownBits))+",",
            (m1m2,m3m4,samplesMtemp) = runSampleRound(n,w,p,knownBits,samples,samplesMtemp)
            roundResults[len(knownBits)] = (m1m2,m3m4)
            ##print (m1m2,m3m4)
            if abs(m1m2-m3m4) < threshold or (m1m2<0 and m3m4<0) or (abs(m1m2-m3m4) <= 3):
                if possibleError or (m1m2<0 and m3m4<0):
                    if numResamples > 10:
                        #print "Too many errors detected, terminating"
                        break
                    ## remove last 2 bits of key and resample
                    ##print "Resampling on bit " + str(len(knownBits)-2)
                    numResamples += 1
                    samples = [int(random.random()*n) for x in range(numSamples)]
                    samplesMtemp = [None]*numSamples
                    if len(knownBits)-2 == 0:
                        knownBits = '1'
                    else:
                        knownBits = knownBits[:-2]
                    possibleError = False
                    continue

                possibleError = True
                ##print "Potential error at bit " + str(len(knownBits))
            else:
                possibleError = False

            if m1m2 > m3m4:
                knownBits += '1'
            else:
                knownBits += '0'


            ## test current key with additional trailing 0 or 1
            k0 = int(knownBits+'0',2)
            ##print "Key guesses: " + format(k0,"X"),format(k0+1,"X")
            if pow(c,k0,n) == m:
                #print ""
                print "Key: " + format(k0,"X")
                keyFound = True
                break
            elif pow(c,k0+1,n) == m:
                #print ""
                print "Key: " + format(k0+1,"X")
                keyFound = True
                break

        #if not keyFound:
           #print "Key not correctly determined, consider larger sample size" 
        return keyFound

    isKeyFound = False
    startingSamples = 3000
    if not isKeyFound:
        findkey(startingSamples)
        startingSamples+=1000
    print "Total timings used: " + str(TOTAL_TIMINGS)

    
    
